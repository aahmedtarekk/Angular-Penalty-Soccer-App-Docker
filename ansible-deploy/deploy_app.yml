- name: Deploy Angular app using Docker
  hosts: localhost
  become: true
  tasks:
    - name: Remove broken Docker APT source if it exists
      file:
        path: /etc/apt/sources.list.d/docker.list
        state: absent

    - name: Remove conflicting packages
      apt:
        name:
          - docker.io
          - containerd
          - containerd.io
        state: absent
        purge: yes
      ignore_errors: yes

    - name: Clean any old Docker APT entries
      shell: |
        grep -v download.docker.com /etc/apt/sources.list | tee /etc/apt/sources.list
        rm -f /etc/apt/sources.list.d/docker.list
        rm -f /etc/apt/trusted.gpg.d/docker.gpg
        rm -f /etc/apt/keyrings/docker.gpg

    - name: Install Docker dependencies
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes

    - name: Add Docker GPG key
      shell: |
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        chmod a+r /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker APT repository
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
        https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
        tee /etc/apt/sources.list.d/docker.list > /dev/null

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Docker CE
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Build Docker image
      command: docker build -t {{ lookup('env', 'DOCKER_IMAGE') }} .
      args:
        chdir: "{{ lookup('env', 'ANSIBLE_WORKSPACE') }}"

    - name: Run Docker container
      docker_container:
        name: test-container
        image: "{{ lookup('env', 'DOCKER_IMAGE') }}"
        state: started
        restart_policy: always
        ports:
          - "3001:80"
        exposed_ports:
          - "80"
        detach: yes
      register: container_status

    - name: Check if container is running
      command: docker ps -q -f name=test-container
      register: container_running
      failed_when: container_running.stdout == ""

    - name: Print status of the container
      debug:
        var: container_status
